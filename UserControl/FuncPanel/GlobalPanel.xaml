<UserControl x:Class="sbid.UserControl.GlobalPanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:sbid.UserControl"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <!-- MoveThumb Template -->
        <!--需要移动的对象，设置样式用的控件模板，作用于MoveThumb-->
        <ControlTemplate x:Key="MoveThumbTemplate" TargetType="{x:Type local:MoveThumb}">
            <!--Fill="Transparent"透明填充矩形，这样图形实际上包在矩形里但是矩形不可见，这些透明部分也可以用来拖拽-->
            <Rectangle Fill="Transparent"/>
        </ControlTemplate>

        <!-- Designer Item Template-->
        <!--这个控件模板用来组合上面那些控件模板，以给图形使用-->
        <ControlTemplate x:Key="DesignerItemTemplate" TargetType="ContentControl">
            <!--??大概是把图形绑定到Grid的DataContext-->
            <!--TemplatedParent是RelativeSource的其中一种方式，使用该方式将使源元素成为模板目标类型—即TargetType-->
            <!--如果该绑定是在模板中，那么它的作为范围也只限于该模板.-->
            <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <!--用于移动的透明矩形，鼠标格式SizeAll-->
                <local:MoveThumb Template="{StaticResource MoveThumbTemplate}" Cursor="SizeAll">
                    <!--右键菜单-->
                    <local:MoveThumb.ContextMenu>
                        <ContextMenu>
                            <MenuItem Name="MenuItem1" Header="文件"/>
                            <MenuItem Name="MenuItem2" Header="编辑"/>
                        </ContextMenu>
                    </local:MoveThumb.ContextMenu>
                </local:MoveThumb>
                <!--?为什么用ContentPresenter?-->
                <!--内容模型不仅仅只是呈现文字而已,如果只是为了呈现文字的话,是不需要ContentPresenter的-->
                <!--其内容绑定自ContentControl.Content-->
                <ContentPresenter Content="{TemplateBinding ContentControl.Content}"/>
            </Grid>
        </ControlTemplate>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="4*"/>
            <RowDefinition Height="96*"/>
        </Grid.RowDefinitions>
        <!--0, 工具栏-->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Background="AliceBlue">
            <Button Content="进程模板" Click="Button_Click_Process"/>
            <Button Content="自定义类型"/>
            <Button Content="公理"/>
            <Button Content="Initial Knowledge"/>
            <Button Content="Safety Property"/>
            <Button Content="Security Property"/>
        </StackPanel>
        <!--1, 绘图面板-->
        <Canvas x:Name="mainCanvas" Grid.Row="1" Background="AntiqueWhite">
            <!--ContentControl内容控件，设置宽高、最小宽高、在Canvas中的位置，模板使用前面整合的DesignerItemTemplate-->
            <ContentControl Width="130"
                    MinWidth="50"
                    Height="130"
                    MinHeight="50"
                    Canvas.Top="150"
                    Canvas.Left="470"
                    Template="{StaticResource DesignerItemTemplate}">
                <!--ContentControl的Content放具体的图形-->
                <!--把IsHitTestVisible设置为False,看起来没有变化,但操作上已经把他完全忽视了,不触发事件,可以直接点到它下面的东西-->
                <Ellipse Fill="Red" IsHitTestVisible="False"/>
            </ContentControl>
        </Canvas>
    </Grid>
</UserControl>
